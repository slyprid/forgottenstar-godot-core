using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Godot;
using FileAccess = Godot.FileAccess;

[Tool]
public partial class Toolbox : Control
{
    #region Controls

    [OnReady("%SFXAssetPathText")] public LineEdit SFXAssetPathText { get; set; }
    [OnReady("%MusicAssetPathText")] public LineEdit MusicAssetPathText { get; set; }
    [OnReady("%RegistryScriptPathText")] public LineEdit RegistryScriptPathText { get; set; }
    [OnReady("%RegistryScriptFilenameText")] public LineEdit RegistryScriptFilenameText { get; set; }
    [OnReady("%GenerateButton")] public Button GenerateButton { get; set; }
    [OnReady("%AudioRegistryProgress")] public ProgressBar AudioRegistryProgress { get; set; }
    [OnReady("%AudioRegistryOutput")] public LineEdit AudioRegistryOutput { get; set; }

    #endregion

    public override void _Ready()
    {
        this.SetOnReadyProperties();
    }

    #region Signals / Events
    
    #endregion

    #region Generate Registry Methods / Functions

    public void OnGenerateAudioRegistryFilePressed()
    {
        var sfxFiles = GetFiles(SFXAssetPathText.Text);
        var sfxFilenames = GetFilenames(sfxFiles);
        var musicFiles = GetFiles(MusicAssetPathText.Text);
        var musicFilenames = GetFilenames(musicFiles);

        BackupFile(RegistryScriptPathText.Text, RegistryScriptFilenameText.Text);
        GenerateRegistryFile(RegistryScriptPathText.Text, RegistryScriptFilenameText.Text, sfxFiles, sfxFilenames, musicFiles, musicFilenames);
    }

    public List<string> GetFiles(string path)
    {
        var ret = new List<string>();
        using var dir = DirAccess.Open(path);
        if (dir != null)
        {
            dir.ListDirBegin();
            var filename = dir.GetNext();
            while (filename != "")
            {
                var output = $"{path}{filename}";
                GD.Print(output);
                ret.Add(output);
                filename = dir.GetNext();
            }
        }
        
        return ret.Where(name => !name.EndsWith(".import")).ToList();
    }

    public List<string> GetFilenames(List<string> files)
    {
        AudioRegistryOutput.Text = "Toolbox >> GetFilenames";
        var ret = new List<string>();
        foreach (var file in files)
        {
            ret.Add(Path.GetFileName(file));
        }
        return ret;
    }

    public void BackupFile(string path, string filename)
    {
        AudioRegistryOutput.Text = "Toolbox >> BackupFile";
        var src = $"{path}{filename}";
        var dest = $"{path}Backup_{Path.GetFileNameWithoutExtension(filename)}_{DateTime.Now:yyyy'-'MM'-'dd'-'HH'-'mm'-'sss}.bak";
        using var dir = DirAccess.Open(path);
        dir.Copy(src, dest);
    }

    public void GenerateRegistryFile(string path, string filename, List<string> sfxFiles, List<string> sfxFilenames, List<string> musicFiles, List<string> musicFilenames)
    {
        var dest = $"{path}{filename}";
        var total = sfxFilenames.Count + musicFilenames.Count;
        AudioRegistryProgress.MaxValue = total;
        AudioRegistryProgress.Value = 0;

        var sb = new StringBuilder();

        sb.AppendLine("// ReSharper disable CheckNamespace");
        sb.AppendLine("using Godot;\r\n");
        sb.AppendLine("/// Generated by Forgotton Star Core Toolbox");
        sb.AppendLine($"/// {DateTime.Now}");
        sb.AppendLine("public partial class Registry");
        sb.AppendLine("{");

        sb.AppendLine("\tpublic static class Audio");
        sb.AppendLine("\t{");

        sb.AppendLine("\t\tpublic static class SoundEffects");
        sb.AppendLine("\t\t{");

        for (var i = 0; i < sfxFiles.Count; i++)
        {
            var currentFile = sfxFiles[i];
            var currentFilename = sfxFilenames[i];
            var fieldName = Path.GetFileNameWithoutExtension(currentFilename).Replace(" ", "_").ToCamelCase();
            sb.AppendLine($"\t\t\tpublic static string {fieldName} = \"{currentFile}\";");
            AudioRegistryProgress.Value++;
        }

        sb.AppendLine("\t\t}\r\n");

        sb.AppendLine("\t\tpublic static class Music");
        sb.AppendLine("\t\t{");

        for (var i = 0; i < musicFiles.Count; i++)
        {
            var currentFile = musicFiles[i];
            var currentFilename = musicFilenames[i];
            var fieldName = Path.GetFileNameWithoutExtension(currentFilename).Replace(" ", "_").ToCamelCase();
            sb.AppendLine($"\t\t\tpublic static string {fieldName} = \"{currentFile}\";");
            AudioRegistryProgress.Value++;
        }

        sb.AppendLine("\t\t}");

        sb.AppendLine("\t}");

        sb.AppendLine("}");

        var ret = sb.ToString();

        using var stream = FileAccess.Open(dest, FileAccess.ModeFlags.Write);
        stream.StoreString(ret);

        AudioRegistryOutput.Text = "Complete!";
    }

    #endregion
}